<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:https="http://www.mulesoft.org/schema/mule/https" xmlns:jdbc-ee="http://www.mulesoft.org/schema/mule/ee/jdbc"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.4.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
http://www.mulesoft.org/schema/mule/ee/jdbc http://www.mulesoft.org/schema/mule/ee/jdbc/current/mule-jdbc-ee.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">

	<mulexml:namespace-manager
		includeConfigNamespaces="false">
		<mulexml:namespace prefix="soapenv"
			uri="http://schemas.xmlsoap.org/soap/envelope/" />
		<mulexml:namespace prefix="urn"
			uri="urn:riv:itintegration:registry:1" />
		<mulexml:namespace prefix="urn1"
			uri="urn:riv:itintegration:monitoring:PingForConfigurationResponder:1" />
	</mulexml:namespace-manager>

	<flow name="PFCAdapterService-service" doc:name="PFCAdapterService-service">
		<https:inbound-endpoint exchange-pattern="request-response"
			address="https://${TP_HOST}:${TP_PORT}/${TP_BASE_URI}/itintegration/monitoring/PingForConfiguration2/1/rivtabp21"
			connector-ref="VPProducerConnector" doc:name="HTTP" />

		<object-to-string-transformer doc:name="Object to String" />
		
		<choice doc:name="Choice">
		<when expression="#[!message.payload.startsWith('/')]">
		
		<set-variable variableName="nameSpace" value="#[xpath('/soapenv:Envelope/soapenv:Body/urn1:PingForConfiguration/urn1:serviceContractNamespace').text]" doc:name="Set NameSpace"/>
                <set-variable variableName="logicalAddress" value="#[xpath('/soapenv:Envelope/soapenv:Body/urn1:PingForConfiguration/urn1:logicalAddress').text]" doc:name="set logicalAddress"/>
                <set-variable variableName="PFCAddresses"
			value="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('PFCAddresses.xml')]"
			doc:name="Read configXML" />
                <scripting:component doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[def xml = PFCAddresses.getText()
def PFCAddresses = new XmlParser().parseText(xml)
log.info("PFCAddressesfile: " + xml)
def nameSpace = flowVars.nameSpace
def logicalAddress = flowVars.logicaladdress
flowVars['SOAPAddress'] = 0
int	allAddresses = PFCAddresses.logicalAddress.size()
for (int i = 0; i < allAddresses; i++)
{
	log.info("in address no: " + i)
	if ( PFCAddresses.logicalAddress[i].'@value' == logicalAddress )
	{
		log.info("logicalAddress is: " + PFCAddresses.logicalAddress[i].'@value')
		int allNamespaces = PFCAddresses.logicalAddress[i].nameSpace.size()
		for (int j = 0; j < allNamespaces; j++)
		{	 
		log.info("in nameSpace no: " + j)
		if ( PFCAddresses.logicalAddress[i].nameSpace[j].'@value' == nameSpace )
			{ 
				log.info("found namespace: " + PFCAddresses.logicalAddress[i].nameSpace[j].'@value' + "setting SOAPAddress to: " + PFCAddresses.logicalAddress[i].nameSpace[j].PFCAddress.text() )
				flowVars.SOAPAddress = PFCAddresses.logicalAddress[i].nameSpace[j].PFCAddress.text()
			}
		}
	}
}

return payload]]></scripting:script>
                </scripting:component>

		<set-variable variableName="logicalAdress" value="#[SOAPAddress]" doc:name="Variable"/>
		</when>
            <otherwise>
                <logger message="WSDL request" level="INFO" doc:name="Logger"/>
			</otherwise>
        </choice>
        
        
		<cxf:proxy-service namespace="urn:riv:itintegration:monitoring:PingForConfiguration2:1:rivtabp21" service="PingForConfigurationResponderService" payload="body" wsdlLocation="classpath:/schemas/interactions/PingForConfigurationInteraction/PingForConfigurationInteraction_1.0_RIVTABP21.wsdl" enableMuleSoapHeaders="false" doc:name="SOAP"/>
        <choice doc:name="Choice">
 			<when expression="#[SOAPAddress == '0']">
                <expression-component doc:name="Return SOAP Fault"><![CDATA[message.payload = '<soap:Fault xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'
                 + '<faultcode>Client</faultcode><faultstring>The Logical Address or the namespace for the Logical Address is missing a configured SOAP Address for  pingForConfiguration</faultstring>'
                 + '</soap:Fault>']]>
                 </expression-component>
                <object-to-string-transformer doc:name="Object to String"/>
 			</when>
            <otherwise>

             	<cxf:proxy-client  payload="body" doc:name="SOAP"/>

                <http:outbound-endpoint exchange-pattern="request-response" method="POST" address="http://#[SOAPAddress]" doc:name="HTTP">
               
                </http:outbound-endpoint>
            </otherwise>
        </choice>



		<!-- <logger message="#[message.payload]" level="INFO" doc:name="Logger"/> 
			<cxf:proxy-service namespace="urn:riv:itintegration:monitoring:PingForConfiguration2:1:rivtabp21" 
			service="PingForConfigurationResponderService" payload="envelope" wsdlLocation="classpath:/schemas/interactions/PingForConfigurationInteraction/PingForConfigurationInteraction_1.0_RIVTABP21.wsdl" 
			doc:name="CallProducerService"/> -->
		
		<custom-exception-strategy
			class="org.soitoolkit.commons.mule.error.ServiceExceptionStrategy"></custom-exception-strategy>
	</flow>
</mule>
